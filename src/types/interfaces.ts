/**\n * QuickCorrect - Type Definitions\n * \n * This file contains all TypeScript interfaces and types used throughout the application.\n */\n\n// Correction-related types\nexport interface CorrectionResult {\n  text: string;\n  explanation?: string;\n  changes: CorrectionChange[];\n  confidence: number;\n  processingTime: number;\n  model: string;\n}\n\nexport interface CorrectionChange {\n  original: string;\n  corrected: string;\n  reason: string;\n  position: {\n    start: number;\n    end: number;\n  };\n}\n\nexport type CorrectionMode = 'business' | 'academic' | 'casual' | 'presentation';\n\n// History-related types\nexport interface CorrectionHistory {\n  id: string;\n  originalText: string;\n  correctedText: string;\n  mode: CorrectionMode;\n  timestamp: Date;\n  model: string;\n  favorite: boolean;\n}\n\n// Settings-related types\nexport interface AppSettings {\n  apiKeys: {\n    openai?: string;\n    anthropic?: string;\n    google?: string;\n  };\n  defaultMode: CorrectionMode;\n  hotkey: string;\n  autoCorrect: boolean;\n  autoCopy: boolean;\n  windowSettings: {\n    alwaysOnTop: boolean;\n    opacity: number;\n    position: {\n      x: number;\n      y: number;\n    };\n    size: {\n      width: number;\n      height: number;\n    };\n  };\n  aiSettings: {\n    primaryProvider: 'openai' | 'anthropic' | 'google';\n    temperature: number;\n    maxTokens: number;\n    timeout: number;\n  };\n  privacy: {\n    saveHistory: boolean;\n    analyticsEnabled: boolean;\n  };\n}\n\n// API-related types\nexport interface APIProvider {\n  name: string;\n  displayName: string;\n  isAvailable: boolean;\n  costPerToken: number;\n  maxTokens: number;\n}\n\nexport interface APIUsage {\n  provider: string;\n  tokensUsed: number;\n  requestCount: number;\n  cost: number;\n  date: Date;\n}\n\n// UI-related types\nexport interface WindowState {\n  isVisible: boolean;\n  isMinimized: boolean;\n  isMaximized: boolean;\n  bounds: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\nexport interface Theme {\n  name: string;\n  colors: {\n    primary: string;\n    secondary: string;\n    background: string;\n    surface: string;\n    text: string;\n    textSecondary: string;\n    border: string;\n    success: string;\n    warning: string;\n    error: string;\n  };\n  typography: {\n    fontFamily: string;\n    fontSize: {\n      small: string;\n      medium: string;\n      large: string;\n    };\n  };\n  spacing: {\n    small: string;\n    medium: string;\n    large: string;\n  };\n}\n\n// Error types\nexport interface AppError {\n  code: string;\n  message: string;\n  details?: any;\n  timestamp: Date;\n}\n\nexport type ErrorCode = \n  | 'API_ERROR'\n  | 'NETWORK_ERROR'\n  | 'VALIDATION_ERROR'\n  | 'PERMISSION_ERROR'\n  | 'HOTKEY_ERROR'\n  | 'STORAGE_ERROR'\n  | 'UNKNOWN_ERROR';\n\n// IPC types for Electron communication\nexport interface ElectronAPI {\n  // Text correction\n  correctText: (text: string, mode: CorrectionMode) => Promise<CorrectionResult>;\n  \n  // Settings\n  getSettings: () => Promise<AppSettings>;\n  saveSettings: (settings: Partial<AppSettings>) => Promise<boolean>;\n  \n  // History\n  getHistory: (limit?: number) => Promise<CorrectionHistory[]>;\n  saveToHistory: (history: Omit<CorrectionHistory, 'id' | 'timestamp'>) => Promise<boolean>;\n  deleteHistory: (id: string) => Promise<boolean>;\n  clearHistory: () => Promise<boolean>;\n  \n  // Window controls\n  hideWindow: () => void;\n  minimizeWindow: () => void;\n  closeWindow: () => void;\n  \n  // Events\n  onTextSelected: (callback: (text: string) => void) => void;\n  removeAllListeners: (channel: string) => void;\n  \n  // Clipboard\n  copyToClipboard: (text: string) => Promise<boolean>;\n  getClipboardText: () => Promise<string>;\n  \n  // System\n  getSystemInfo: () => Promise<SystemInfo>;\n  checkPermissions: () => Promise<PermissionStatus>;\n}\n\nexport interface SystemInfo {\n  platform: 'win32' | 'darwin' | 'linux';\n  version: string;\n  arch: string;\n  memory: {\n    total: number;\n    used: number;\n  };\n}\n\nexport interface PermissionStatus {\n  accessibility: boolean;\n  microphone: boolean;\n  camera: boolean;\n  notifications: boolean;\n}\n\n// Utility types\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\n// Component prop types\nexport interface BaseComponentProps {\n  className?: string;\n  style?: React.CSSProperties;\n  children?: React.ReactNode;\n}\n\n// Global declarations for window object\ndeclare global {\n  interface Window {\n    electronAPI: ElectronAPI;\n  }\n}\n\nexport {};