/**\n * QuickCorrect - Main Process Entry Point\n * \n * This file serves as the main entry point for the Electron application.\n * It handles:\n * - Application lifecycle management\n * - Window creation and management\n * - Global hotkey registration\n * - IPC communication setup\n */\n\nimport { app, BrowserWindow, globalShortcut, ipcMain } from 'electron';\nimport * as path from 'path';\nimport { HotkeyController } from '../controllers/HotkeyController';\nimport { CorrectionController } from '../controllers/CorrectionController';\nimport { ClipboardController } from '../controllers/ClipboardController';\n\n// Keep a global reference of the window object\nlet mainWindow: BrowserWindow | null = null;\nlet hotkeyController: HotkeyController;\nlet correctionController: CorrectionController;\nlet clipboardController: ClipboardController;\n\n/**\n * Create the main application window\n */\nfunction createWindow(): void {\n  // Create the browser window\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 500,\n    minWidth: 600,\n    minHeight: 400,\n    show: false, // Don't show until ready\n    alwaysOnTop: true,\n    frame: true,\n    titleBarStyle: 'default',\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, '../preload/preload.js'),\n      webSecurity: true\n    },\n    icon: path.join(__dirname, '../../assets/icon.png') // Add app icon\n  });\n\n  // Load the app\n  if (process.env.NODE_ENV === 'development') {\n    mainWindow.loadURL('http://localhost:3000');\n    mainWindow.webContents.openDevTools();\n  } else {\n    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'));\n  }\n\n  // Show window when ready to prevent visual flash\n  mainWindow.once('ready-to-show', () => {\n    if (mainWindow) {\n      mainWindow.show();\n      \n      // Focus the window if it was triggered by hotkey\n      if (process.platform === 'darwin') {\n        mainWindow.focus();\n      }\n    }\n  });\n\n  // Handle window closed\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n\n  // Handle window minimize (hide instead of minimize for better UX)\n  mainWindow.on('minimize', (event) => {\n    event.preventDefault();\n    mainWindow?.hide();\n  });\n}\n\n/**\n * Initialize application controllers\n */\nfunction initializeControllers(): void {\n  // Initialize controllers\n  hotkeyController = new HotkeyController();\n  correctionController = new CorrectionController();\n  clipboardController = new ClipboardController();\n\n  // Register global hotkey\n  hotkeyController.registerHotkey('CommandOrControl+T', () => {\n    showWindowWithSelectedText();\n  });\n}\n\n/**\n * Show window and process selected text\n */\nasync function showWindowWithSelectedText(): Promise<void> {\n  try {\n    // Get selected text from clipboard\n    const selectedText = await clipboardController.getSelectedText();\n    \n    if (selectedText) {\n      // Show window if hidden\n      if (mainWindow) {\n        if (!mainWindow.isVisible()) {\n          mainWindow.show();\n        }\n        mainWindow.focus();\n        \n        // Send selected text to renderer\n        mainWindow.webContents.send('text-selected', selectedText);\n      }\n    }\n  } catch (error) {\n    console.error('Error processing selected text:', error);\n  }\n}\n\n/**\n * Setup IPC handlers\n */\nfunction setupIPC(): void {\n  // Handle text correction request\n  ipcMain.handle('correct-text', async (event, text: string, mode: string) => {\n    try {\n      const correctedText = await correctionController.correctText(text, mode);\n      \n      // Auto-copy to clipboard\n      await clipboardController.copyToClipboard(correctedText.text);\n      \n      return correctedText;\n    } catch (error) {\n      console.error('Text correction error:', error);\n      throw error;\n    }\n  });\n\n  // Handle settings requests\n  ipcMain.handle('get-settings', async () => {\n    // TODO: Implement settings retrieval\n    return {};\n  });\n\n  ipcMain.handle('save-settings', async (event, settings) => {\n    // TODO: Implement settings saving\n    return true;\n  });\n\n  // Handle window control\n  ipcMain.handle('hide-window', () => {\n    mainWindow?.hide();\n  });\n\n  ipcMain.handle('minimize-window', () => {\n    mainWindow?.minimize();\n  });\n\n  ipcMain.handle('close-window', () => {\n    mainWindow?.close();\n  });\n}\n\n/**\n * App event handlers\n */\n\n// This method will be called when Electron has finished initialization\napp.whenReady().then(() => {\n  createWindow();\n  initializeControllers();\n  setupIPC();\n\n  // On macOS, re-create window when dock icon is clicked\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n});\n\n// Quit when all windows are closed\napp.on('window-all-closed', () => {\n  // On macOS, keep app running even when all windows are closed\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\n// Clean up before quitting\napp.on('before-quit', () => {\n  // Unregister all global shortcuts\n  globalShortcut.unregisterAll();\n});\n\n// Handle app activation (macOS)\napp.on('activate', () => {\n  if (mainWindow === null) {\n    createWindow();\n  } else {\n    mainWindow.show();\n  }\n});\n\n// Security: Prevent new window creation\napp.on('web-contents-created', (event, contents) => {\n  contents.on('new-window', (event, navigationUrl) => {\n    event.preventDefault();\n    console.log('Prevented new window:', navigationUrl);\n  });\n});\n\nexport { mainWindow };